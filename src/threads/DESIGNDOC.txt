			+--------------------+
			|         OS         |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+

---- GROUP ----

>> Fill in the names, email addresses and matriculation numbers of your group members.

Priya Pandya <prpa00001@uni-saarland.de> 7022812
Parth Thakker <path00003@uni-saarland.de> 7023151

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> CITATIONS:
1. www.cs.umd.edu
2. www.csl.mtu.edu
3. http://web.stanford.edu/
4. https://www.ccs.neu.edu/home/skotthe/classes/cs5600/fall/2015/notes/pintos-project1.pdf
5. https://www.ccs.neu.edu/home/amislove/teaching/cs5600/fall10/pintos/

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* modified or new data structures */
>> thread.h: In struct thread
	struct list_elem donorelem;	// priority donor threads
	int64_t ticks_wakeup;   	// ticks to wakeup 
	int base_priority;   		// the priority of the base element/thread
	struct thread *locker;		// the locker thread who currently has acquired the resource
	struct list prio_donors;	// threads who have acquired locks but a new thread having higher priority comes
	struct lock *blocked;		// blocked thread

>> thread.c:
	extern struct list sleep_list;    // list for sleeping threads

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

>>>> Earlier, timer_sleep() was calling thread_yield() which was constanting putting threads between READY queue and RUN queue, and ultimately occupying CPU.
Now, the current thread is first disabled. Then it is made to sleep (blocked) for given number of ticks. 
The thread is then inserted into a list (sleep_list) which is done by comparing the number of ticks, so that we can prioritize the thread with an earlier wake-up time.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

>>>> 

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

>>>> The priorities of each thread is compared (cmp_cond_priority and cmp_priority) and then added to the thread queue accordingly. 
The code in sema_up() in the synch.c is also changed a bit to make the queue, a priority queue. 

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

>>>> 

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

>>>>


    		     PROD/CONS
	  		     =========

---- SYNCHRONIZATION ----

>> B1: How does your solution guarantee that consumers will hold until
>> there is something to consume in the buffer?

>> B2: How does your solution guarantee that producers will hold until
>> there is some free space in the buffer?

>> B3: How does your solution preserve a FIFO semantics i.e., the first
>> character produced will be the first to be consumed?

---- RATIONALE ----

>> B4: Give an intuition for why your program preserves safety.

>> B5: Why did you choose this design? Did you consider other design
>> alternatives? In what ways is it superior to another design you considered?


			     NARROW BRIDGE
			     =============

---- SYNCHRONIZATION ----

>> C1: How does your solution guarantee that no more that 3 vehicles
>> are crossing the bridge in the same direction?

>> C2: What prevents vehicles from opposite directions from crossing the
>> bridge simultaneously?

>> C3: How does your solution grant priority to emergency vehicles over
>> the queue of vehicles ahead in the same direction?

>> C4: How do you guarantee that despite having priority, emergency vehicles
>> do not start crossing the bridge while there are still vehicles crossing
>> it in the oposite direction?

>> C5: Explain with examples why your solution does not preserve neither
>> fairness nor freedom from starvation, other than what has been indicated
>> for emergency vehicles.

---- RATIONALE ----

>> C6: Why did you choose this design? Did you consider other design
>> alternatives? In what ways is it superior to another design you considered?


			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future semesters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the semester.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future semesters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future semesters or the remaining projects?

>> Any other comments?
