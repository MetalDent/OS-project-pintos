		     +--------------------------+
		     |            OS            |
		     | PROJECT 2: USER PROGRAMS |
		     |     DESIGN DOCUMENT      |
		     +--------------------------+

---- GROUP ----

>> Fill in the names, email addresses and matriculation numbers of your group members.

Priya Pandya <prpa00001@uni-saarland.de> 7022812
Parth Thakker <path00003@uni-saarland.de> 7023151

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> CITATIONS:

1. www.cs.umd.edu
2. http://web.stanford.edu/
3. https://www.ccs.neu.edu/home/skotthe/classes/cs5600/fall/2015/notes/pintos-project2.pdf
4. Some GitHub repos for reference

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In thread.h:
	struct thread:
		bool success;			// to store whether the operation was successful or not
    		int exit_error;			// to store to value of error on exit which is printed at the end 
    		struct file *self;		// current file

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

In the "setup_stack" function, the command line arguments are parsed using the "strtok_r" function.
A pointer (save_ptr) keeps track of each argument. "calloc" and "malloc" are used to allocate
space. "esp" variable is the stack pointer variable. 

When all the arguments are copied, they will be in the reverse order. So we can word align 
(word = 4 bytes):
while((int)*esp%4 != 0)
  {
    *esp -= sizeof(char);
    char x = 0;
    memcpy(*esp, &x, sizeof(char));
  }
We pushed the pointers from argv in the stack. After the arguments are pushed in the stack, 
we freed "argv" and "cp" (contains file name). 

The overflow is avoided by doubling the sizes of esp and argv.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

"strtok_r()" is implemented instead of "strtok()" as in the later one 
the point where the last token was found is kept internally by the function 
to be use on the next call to "strtok()". Here the problem is it'll be prone to
race conditions. If two threads are calling "strtok()" then there is a possibility
when one uses the last token held by the other. This can crash the kernel.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

1. In Unix, the kernel does not have to worry about parsing.
2. Kernel no longer needs to validate security.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In thread.h:
	struct thread:
		struct list files;		// list of the files to track them
	    	int fd_count;			// file descriptor counter
	    	struct thread *parent;		// parent thread
		struct list child_process;	// children processes
		struct semaphore child_lock;	// semaphore for the children processes
		int waitingon;			// process is waiting onto which other process
	
	struct child:
    		int tid;			// thread id
    		struct list_elem elem;		// the list element
    		int exit_error;			// to store to value of error on exit which is printed at the end
    		bool used;			// is the current child used already or not

In syscall.c:
	struct process_file: 
		struct file* ptr;	// pointer to the current file
		int fd;			// file descriptor
		struct list_elem elem;	// element

In thread.c:
	struct lock filesys_lock;	// lock the critical section for modifying files
    	
>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

The file descriptors are only unique to the open file within every process.
Every process has its own "fd_count" which gets incremented when it gets open everytime.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

Before we write or read, we first check if the stack pointer is valid.
This is done using the method "check_address()". If it's valid then we can check 
which system call to run. We will then check if the buffer is valid. 
If it is then we can proceed.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

\o/

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

First we check if the pointer is valid or not. Then we call "process_wait()"
method. This waits for the child process to finish, i.e., child process terminates. 

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

\o/

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

The status is tracked and then checked if it is loaded or not. If not loaded
then we exit with exit(-1) error.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

While P is waiting for C, it stops and waits for C to exit. When C exits, its locks 
are released. If P calls wait after C exits then P actualy has no child to wait on.
If P terminates before C exits then it kills all its children, including C which 
basically releases their locks.
If P terminates after C exits then C's locks get released. 

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

\o/

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

As every "fd" is unique to each process then there is no race condition.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

\o/

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

This assignment seemed difficult than the previous one as we had to read up 
online guides and code segments. Doing this took more time than we had planned.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

Working on system calls gave us insights into different functionalities and how to 
implement them in the low level.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

\o/

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
